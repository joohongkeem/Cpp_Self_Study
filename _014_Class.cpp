#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;

/*
	클래스란 기본적으로 멤버 데이터 뿐만 아니라 멤버 함수를 갖는 하나의 구조체이다.
	- 접근제한자
		> public : 멤버 변수가 따라야 할 어떠한 제한도 없음
		> private : 클래스의 멤버함수 내부를 제외하고 다른 어떤곳에서도 
					private으로 선언된 멤버 변수를 참조할 수 없다.
					-> 객체의 값을 받으려면 accessor함수, 
					   객체에 값을 입력하려면 mutator 함수 사용!! ★★★

		> 일반적으로, 모든 멤버변수를 private로, 모든 멤버함수를 public으로 선언한다!
		  (public, private를 지정하지 않으면, 기본적으로 private로 선언된다)

	- 객체(object) : 클래스형의 변수 값, 데이터 멤버와 함수 멤버를 둘다 갖는다.
	- 멤버함수의 정의
		> 반환형 class이름::함수이름(매개변수 리스트)
		{
			함수의 몸체
		}
	
		> :: (영역지정연산자) - 멤버 함수가 어떤 클래스의 멤버인지 구별하기 위해 사용
		  ::앞에있는 class 이름 : 형 제한자
				ex) void DayofYear::output()
					{
						...
					}
		  . (도트연산자) : 해당클래스의 객체와 함께 사용되어, 멤버를 결정한다.
				ex) DayofYear today;
					today.output();
	
	- 데이터형(data type) : 다양한 값들의 집합과 + 값에 따라 사전에 정의된 일련의 기본연산
		-> 해당 데이터형을 사용하는 프로그래머가 어떻게 값과 연산이 구현되어있는지
		   세부적으로 접근할 수 없다 --> 추상 데이터형(ADT, Abstract Data Type) ★★★
	    -> 우리도 프로그램을 짤때, 연산의 구현을 최소한으로 공개하려고 노력해야한다.
		-> 다른 사용자들은, March가 int값 3인지, 문자열 "March"인지 전혀 알 필요가 없다!!
		-> ★정보 은닉(information hiding), 자료 추상화(data abstraction), 캡슐화(encapsulation)★
		-> ★★ 모든 멤버 변수를 private로 선언하자!!!


		* 인터페이스와 구현을 분리하자!!
		- 캡슐화의 원칙은 클래스의 사용자가 클래스 내부의 구현을 신경쓰지 않을 수 있도록!
			-> 사용자는 API만 알면 된다!!
			-> API : 어떻게 클래스를 사용해야 하는지에 대한 규칙
			-> API라는 인터페이스와 클래스의 구현을 명확하게 분리하는것은 매우 중요하다!!!
			-> 클래스의 구현은 멤버변수와 멤버 함수 모두에 대한 정의로 구성된다.

	- 구조체 역시 클래스의 모든 기능을 다 할 수 있다.
	  (public, private의 접근제한자 역시 존재함)
	  But, 유일한 차이점은, 접근제한자가 없으면 구조체는 public으로, 클래스는 private로 가정! 
	*/

int main()
{
	

	return 0;
}