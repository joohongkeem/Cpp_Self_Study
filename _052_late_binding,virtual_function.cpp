/*
	* C++의 가상함수

	- 자동차 부품 상점에서 판매 기록을 관리하는 프로그램을 설계한다고 하자.
	  프로그램이 다양한 기능을 가져야 하지만 모든 가능한 상황을 고려했는지 확실하지 않다
	  예를 들면, 판매를 기록하려고 하지만 모든 종류의 판매 유형을 예측할 수는 없다.
	  처음에는 하나의 특정 부품을 사기 위해 상점에 오는 소매 소비자에게 정상 가격에 파는 정상 판매만을 고려했다.
	  허나 나중에 할인 판매나 배송비가 포함된 우편 주문 판매를 추가하려고 한다.
	  이 모든 판매는 정상 가격의 상품에 대한 것이고 궁극적으로 계산서를 발행할 것이다.

	  일반적인 판매에서는 정상 가격의 계산서만 발행하지만, 
	  만일 후에 할인을 추가한다면 한다면 여러 종류의 계산서가 필요할 것이다.
	  
	  다양한 경우를 처리하기 위해 계산서를 계싼하기 위한 함수를 가상 함수로 만든다!!!
*/


/*	
	* 가상 함수

	- 가상 함수는 멤버 함수 선언(이것은 클래스 정의에서 주어짐) 에서 변경자 virtual로 표시된다.
	> 만일 함수가 가상이고 함수의 새로운 정의가 파생 클래스에서 주어지면,
	  가상 함수가 상속 함수의 정의에서 호출되어 간접적으로 사용된다고 하더라도, 
	  파생 클래스의 모든 객체는 파생 클래스에서 주어진 가상 함수의 정의를 항상 사용한다.
	> 가상 함수의 어떤 정의를 사용할 것인가를 결정하는 방법을 '사후 바인딩(late binding)'이라고 한다.
	> 또한 가상 함수의 정의부분에는 virtual 을 적지 않는다.★★★★★★★★★★★★★★★★

		[단점]
		- 함수를 가상으로 만들게 되면 더 많은 저장곤간을 사용하고 프로그램의 실행이 늦어지게 된다.


	* 다형성
	
	- 다형성(polymorphism)은 사후 바인딩 기법으로 한 함수 이름에 여러 의미를 연관시키느느 능력을 말한다.
	> 즉, 다형성, 사후 바인딩, 그리고 가상 함수는 실제로 모두 같은 주제를 다룬다.


	* ★오버라이딩★

	- 가상 함수 정의가 파생 클래스에서 변경될 때 프로그래머는 종종 함수 정의가 오버라이딩(overriding)되었다고 말한다.
	  C++ 문헌에서는 재정의(redefined)와 오버라이딩을 구분한다.
	  이 두 용어는 파생 클래스에서 함수의 정의를 바꾸는 것을 말한다.
	> 만일 함수가 가상 함수라면 이 것을 '오버라이딩' 이라고 부르고, 가상 함수가 아니라면 '재정의'라고 부른다.

*/




// 가상함수 bill의 수행을 보여준다.
//

#include <iostream>
#include "_052_sale.h"					// 실제로는 불필요하지만 ifndef때문에 안전하다.
#include "_052_discountsale.h"

using std::cin;
using std::cout;
using std::endl;
using std::ios;
using namespace SavitchSale;


int main()
{
	Sale simple(10.00);					// 한개에 $10.00
	DiscountSale discount(11.00, 10);	// 한개에 $11.00 이고 10% 할인이다.

	cout.setf(ios::fixed);
	cout.setf(ios::showpoint);
	cout.precision(2);
	
	// ★★★★★★
	// 객체 discount와 simnple은 비교 연산을 할때, 멤버 함수 bill에 대해 다른 코드를 사용한다.
	// > savings에도 마찬가지로 적용한다.
	//
	if(discount < simple)
	{
		cout << "할인된 것이 더 저렴합니다. " << endl;
		cout << ">> $" <<simple.savings(discount) << " 를 절약할 수 있습니다." << endl;
/*
	double Sale::savings(const Sale& other) const
	{
		return (bill() - other.bill());
	}

	이므로 other.bill()에서는 Discountsale클래스의 bill()함수가 호출된다 ★★★★★★
*/
	}
	else
		cout << "할인된 것이 더 비쌉니다. " << endl;

	return 0;
}